import tkinter as tk
from tkinter import scrolledtext, messagebox
import threading
import pyperclip
import pyautogui
import keyboard
import queue
import os
import sys
import zipfile
import requests
from io import BytesIO
import time
import ctypes
from ctypes import wintypes

# =============================
# üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
# =============================
def install_package(package):
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

required_packages = [
    "vosk", "pyaudio", "requests", "keyboard", "pyautogui", "pyperclip",
    "pynput", "ahk"
]
for package in required_packages:
    try:
        __import__(package.replace("-", "_"))
    except ImportError:
        print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package}...")
        install_package(package)

# –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
from vosk import Model, KaldiRecognizer
import pyaudio

# =============================
# üåê –ú–û–î–£–õ–¨: –†–ê–ë–û–¢–ê –° –†–ê–°–ö–õ–ê–î–ö–û–ô –ò AHK
# =============================
try:
    from ahk import AHK
    ahk = AHK()
except Exception as e:
    print(f"‚ö†Ô∏è AHK –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    ahk = None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π —á–µ—Ä–µ–∑ Windows API
user32 = ctypes.WinDLL('user32', use_last_error=True)

def get_foreground_window():
    """–ü–æ–ª—É—á–∞–µ—Ç handle –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
    return user32.GetForegroundWindow()

def get_keyboard_layout(window_handle):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞"""
    thread_id = user32.GetWindowThreadProcessId(window_handle, 0)
    layout_id = user32.GetKeyboardLayout(thread_id)
    return layout_id & 0xFFFF

def is_russian_layout():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ —Ä—É—Å—Å–∫–æ–π"""
    try:
        hwnd = get_foreground_window()
        layout = get_keyboard_layout(hwnd)
        return layout == 0x419  # 0x419 - —Ä—É—Å—Å–∫–∞—è (RU)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏: {e}")
        return False

def switch_to_english():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É"""
    if not ahk:
        print("AHK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
        return
    try:
        ahk.send('{LWin down}{Space}{LWin up}')
        time.sleep(0.3)
        print("üåê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {e}")

def switch_to_russian():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É"""
    if not ahk:
        print("AHK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
        return
    try:
        ahk.send('{LWin down}{Space}{LWin up}')
        time.sleep(0.3)
        print("üåê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π: {e}")

def execute_copy_all():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç Ctrl+A ‚Üí Ctrl+C —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏"""
    try:
        was_russian = is_russian_layout()
        
        if was_russian:
            switch_to_english()
            time.sleep(0.3)
        
        print("üìã –í—ã–ø–æ–ª–Ω—è–µ–º Ctrl+A ‚Üí Ctrl+C")
        if ahk:
            ahk.send('^a')
            time.sleep(0.2)
            ahk.send('^c')
        else:
            pyautogui.hotkey('ctrl', 'a')
            time.sleep(0.2)
            pyautogui.hotkey('ctrl', 'c')
        time.sleep(0.2)
        
        if was_russian:
            switch_to_russian()
            time.sleep(0.2)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ execute_copy_all: {e}")

def execute_replace_all():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç Ctrl+A ‚Üí Delete ‚Üí Ctrl+V —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏"""
    try:
        was_russian = is_russian_layout()
        
        if was_russian:
            switch_to_english()
            time.sleep(0.3)
        
        print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º Ctrl+A ‚Üí Del ‚Üí Ctrl+V")
        if ahk:
            ahk.send('^a')
            time.sleep(0.2)
            ahk.send('{Del}')
            time.sleep(0.2)
            ahk.send('^v')
        else:
            pyautogui.hotkey('ctrl', 'a')
            time.sleep(0.2)
            pyautogui.press('delete')
            time.sleep(0.2)
            pyautogui.hotkey('ctrl', 'v')
        time.sleep(0.2)
        
        print("üîÅ –ù–∞–∂–∏–º–∞–µ–º F5 ‚Üí –ø–∞—É–∑–∞ ‚Üí Enter")
        if ahk:
            ahk.send('{F5}')
        else:
            pyautogui.press('f5')
        time.sleep(0.5)
        if ahk:
            ahk.send('{Enter}')
        else:
            pyautogui.press('enter')
        time.sleep(0.2)
        
        if was_russian:
            switch_to_russian()
            time.sleep(0.2)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ execute_replace_all: {e}")

# =============================
# üåê –ê–í–¢–û–°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò –†–ê–°–ü–ê–ö–û–í–ö–ê –ú–û–î–ï–õ–ò VOSK
# =============================
MODEL_URL = "https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip"  # ‚úÖ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!
MODEL_DIR = "model"

def download_and_extract_model():
    if os.path.exists(MODEL_DIR) and os.path.exists(os.path.join(MODEL_DIR, "model.conf")):
        print("‚úÖ –ú–æ–¥–µ–ª—å Vosk —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return True
    
    try:
        print("üåê –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Vosk (—Ä—É—Å—Å–∫–∏–π, small)...")
        response = requests.get(MODEL_URL, stream=True)
        response.raise_for_status()
        
        total_size = int(response.headers.get('content-length', 0))
        downloaded = 0
        chunk_size = 8192
        
        with BytesIO() as file_buffer:
            for chunk in response.iter_content(chunk_size=chunk_size):
                if chunk:
                    file_buffer.write(chunk)
                    downloaded += len(chunk)
                    if total_size > 0:
                        percent = int(downloaded * 100 / total_size)
                        print(f"\rüîΩ –°–∫–∞—á–∞–Ω–æ: {percent}%", end="")
            
            print("\n‚úÖ –ú–æ–¥–µ–ª—å —Å–∫–∞—á–∞–Ω–∞. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞...")
            file_buffer.seek(0)
            
            with zipfile.ZipFile(file_buffer) as z:
                folder_name = None
                for name in z.namelist():
                    if name.endswith("model.conf"):
                        folder_name = name.split('/')[0]
                        break
                if not folder_name:
                    raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –º–æ–¥–µ–ª–∏ –≤ –∞—Ä—Ö–∏–≤–µ")
                
                z.extractall()
                
                if os.path.exists(MODEL_DIR):
                    import shutil
                    shutil.rmtree(MODEL_DIR)
                os.rename(folder_name, MODEL_DIR)
        
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

if not download_and_extract_model():
    raise Exception("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å Vosk. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")

# =============================
# üîå –ú–û–î–£–õ–¨: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
# =============================
class TextProcessor:
    def __init__(self, use_english_mode=False):
        self.use_english_mode = use_english_mode
        self.russian_to_latin = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh',
            '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
            '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts',
            '—á': 'ch', '—à': 'sh', '—â': 'shch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        }

    def transliterate_word(self, word):
        if not self.use_english_mode:
            return word
        result = ""
        i = 0
        while i < len(word):
            char = word[i]
            if i < len(word) - 1:
                two_chars = word[i:i+2].lower()
                if two_chars in ('–∂–∏', '—à–∏', '—á–µ', '—â–µ', '—Ö—É'):
                    mapping = {'–∂–∏': 'zhi', '—à–∏': 'shi', '—á–µ': 'che', '—â–µ': 'shche', '—Ö—É': 'khu'}
                    result += mapping[two_chars]
                    i += 2
                    continue
            result += self.russian_to_latin.get(char, char)
            i += 1
        return result

    def process(self, text):
        if not text:
            return ""
        clean_text = text.lower()
        if self.use_english_mode:
            words = clean_text.split()
            transliterated_words = [self.transliterate_word(word) for word in words]
            clean_text = ' '.join(transliterated_words)
        return clean_text


# =============================
# üîå –ú–û–î–£–õ–¨: –í—Å—Ç–∞–≤—â–∏–∫ —Ç–µ–∫—Å—Ç–∞
# =============================
class TextInserter:
    def __init__(self):
        self.ahk = None
        try:
            from ahk import AHK
            self.ahk = AHK()
        except Exception as e:
            print(f"‚ö†Ô∏è AHK –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

    def insert(self, text):
        if text is None:
            text = ""
        try:
            if self.ahk:
                if text:
                    self.ahk.type(text)
                self.ahk.send("{Space}")
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ AHK: {e}")
        try:
            pyperclip.copy(text)
            pyautogui.hotkey('ctrl', 'v')
            pyautogui.press('space')
            return True
        except Exception as e2:
            print(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: {e2}")
            return False


# =============================
# üîå –ú–û–î–£–õ–¨: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ (VOSK)
# =============================
class VoskSpeechRecognizer:
    def __init__(self):
        self.model = Model(MODEL_DIR)
        self.recognizer = KaldiRecognizer(self.model, 16000)
        self.audio = pyaudio.PyAudio()
        self.stream = None
        self.listening = False

    def listen(self, result_queue, listening_flag):
        self.stream = self.audio.open(
            format=pyaudio.paInt16,
            channels=1,
            rate=16000,
            input=True,
            frames_per_buffer=8000
        )
        
        self.stream.start_stream()
        
        while listening_flag():
            try:
                data = self.stream.read(4000, exception_on_overflow=False)
                if self.recognizer.AcceptWaveform(data):
                    result = self.recognizer.Result()
                    import json
                    text = json.loads(result).get("text", "")
                    if text.strip():
                        result_queue.put(text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
                break
        
        self.stream.stop_stream()
        self.stream.close()

    def stop(self):
        if self.stream:
            self.stream.close()


# =============================
# üéõÔ∏è –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° ‚Äî –° VOSK + –ê–í–¢–û–£–°–¢–ê–ù–û–í–ö–ê
# =============================
class SmartInstantVoiceNotepad:
    def __init__(self, root):
        self.root = root
        self.root.title("üé§ –ê–†–î–£ –ë–õ–û–ö–ù–û–¢ –ü–†–û")
        self.root.geometry("900x700")
        self.root.configure(bg='#2c3e50')
        
        self.text_processor = TextProcessor(use_english_mode=False)
        self.text_inserter = TextInserter()
        self.speech_recognizer = VoskSpeechRecognizer()
        
        self.listening = False
        self.current_text = ""
        self.result_queue = queue.Queue()
        self.last_status = ""
        
        try:
            keyboard.add_hotkey('f12', self.paste_text_global)
            self.start_pynput_listeners()  # <-- –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –ë–ï–ó –ª—è–º–±–¥!
        except Exception as e:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ç–∫–µ–∏: {str(e)}")

        self.setup_ui()

    def start_pynput_listeners(self):
        """–ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª–µ–π pynput ‚Äî –ë–ï–ó –ª—è–º–±–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NameError"""
        try:
            from pynput import keyboard as pynput_kb, mouse as pynput_ms
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å pynput: {e}")
            return

        def on_press_key(key):
            try:
                if hasattr(key, 'name') and key.name == 'page_up':
                    execute_copy_all()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–∏: {e}")

        def on_release_key(key):
            if key == pynput_kb.Key.esc:
                print("‚úã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                self.root.after(0, self.root.quit)
                return False

        def on_click(x, y, button, pressed):
            if pressed and button == pynput_ms.Button.middle:
                execute_replace_all()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ ‚Äî –æ–Ω–∏ —Å–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ñ–æ–Ω–µ
        pynput_kb.Listener(on_press=on_press_key, on_release=on_release_key).start()
        pynput_ms.Listener(on_click=on_click).start()

    def setup_ui(self):
        main_container = tk.Frame(self.root, bg='#2c3e50')
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        title_label = tk.Label(main_container, text="üé§ –ê–†–î–£ –ë–õ–û–ö–ù–û–¢ –ü–†–û", 
                               font=('Arial', 18, 'bold'), bg='#2c3e50', fg='white')
        title_label.pack(pady=20)
        
        button_frame = tk.Frame(main_container, bg='#2c3e50')
        button_frame.pack(pady=15)

        self.start_btn = tk.Button(button_frame, text="üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", command=self.toggle_recording,
                                   font=('Arial', 10, 'bold'), bg='#e74c3c', fg='white', 
                                   activebackground='#c0392b', relief=tk.RAISED, bd=3, padx=12, pady=8)
        self.start_btn.pack(side=tk.LEFT, padx=5)

        self.clear_btn = tk.Button(button_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_text,
                                   font=('Arial', 10, 'bold'), bg='#f39c12', fg='white',
                                   activebackground='#d35400', relief=tk.RAISED, bd=3, padx=12, pady=8)
        self.clear_btn.pack(side=tk.LEFT, padx=5)

        self.copy_btn = tk.Button(button_frame, text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_to_clipboard,
                                  font=('Arial', 10, 'bold'), bg='#27ae60', fg='white',
                                  activebackground='#229954', relief=tk.RAISED, bd=3, padx=12, pady=8)
        self.copy_btn.pack(side=tk.LEFT, padx=5)

        self.eng_btn = tk.Button(button_frame, text="üî§ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –í–´–ö–õ", command=self.toggle_english_mode,
                                 font=('Arial', 10, 'bold'), bg='#3498db', fg='white',
                                 activebackground='#2980b9', relief=tk.RAISED, bd=3, padx=12, pady=8)
        self.eng_btn.pack(side=tk.LEFT, padx=5)

        self.copy_all_btn = tk.Button(button_frame, text="üìã –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë + –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=execute_copy_all,
                                      font=('Arial', 10, 'bold'), bg='#9b59b6', fg='white',
                                      activebackground='#8e44ad', relief=tk.RAISED, bd=3, padx=12, pady=8)
        self.copy_all_btn.pack(side=tk.LEFT, padx=5)

        self.replace_all_btn = tk.Button(button_frame, text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å—ë + –≤—Å—Ç–∞–≤–∏—Ç—å", command=execute_replace_all,
                                         font=('Arial', 10, 'bold'), bg='#e67e22', fg='white',
                                         activebackground='#d35400', relief=tk.RAISED, bd=3, padx=12, pady=8)
        self.replace_all_btn.pack(side=tk.LEFT, padx=5)
        
        self.record_indicator = tk.Label(main_container, text="üî¥ –ù–ï –ó–ê–ü–ò–°–´–í–ê–ï–¢", 
                                        font=('Arial', 12, 'bold'), fg='red', bg='#2c3e50')
        self.record_indicator.pack(pady=10)
        
        text_label = tk.Label(main_container, text="–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", 
                             font=('Arial', 11, 'bold'), fg='#ffffff', bg='#2c3e50')
        text_label.pack(pady=(15, 5), anchor=tk.W)
        
        self.text_area = scrolledtext.ScrolledText(main_container, wrap=tk.WORD, width=100, height=15, 
                                                  font=('Consolas', 12, 'bold'),
                                                  bg='#1a1a1a', fg='#ffffff',
                                                  relief=tk.SUNKEN, bd=3, insertbackground='white')
        self.text_area.pack(pady=5, fill=tk.BOTH, expand=True)
        self.text_area.insert(tk.END, "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ç–µ–∫—Å—Ç...\n\n")
        
        self.stats_frame = tk.Frame(main_container, bg='#2c3e50')
        self.stats_frame.pack(pady=10, fill=tk.X)
        self.stats_label = tk.Label(self.stats_frame, text="–°–ª–æ–≤: 0 | –°–∏–º–≤–æ–ª–æ–≤: 0", 
                                   font=('Arial', 9), fg='#bdc3c7', bg='#2c3e50')
        self.stats_label.pack()
        
        self.status_var = tk.StringVar()
        self.status_var.set("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å'")
        status_bar = tk.Label(main_container, textvariable=self.status_var, relief=tk.SUNKEN, 
                              anchor=tk.W, bg='#34495e', fg='#ffffff', font=('Arial', 9))
        status_bar.pack(side=tk.BOTTOM, fill=tk.X, pady=(10, 0))

    def set_status(self, msg):
        if msg != self.last_status:
            self.last_status = msg
            self.status_var.set(msg)

    def toggle_english_mode(self):
        self.text_processor.use_english_mode = not self.text_processor.use_english_mode
        if self.text_processor.use_english_mode:
            self.eng_btn.config(text="üî§ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –í–ö–õ", bg='#2980b9')
            self.set_status("üî§ –†–µ–∂–∏–º: —Ä—É—Å—Å–∫–∞—è —Ä–µ—á—å ‚Üí –ª–∞—Ç–∏–Ω–∏—Ü–∞")
        else:
            self.eng_btn.config(text="üî§ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –í–´–ö–õ", bg='#3498db')
            self.set_status("üî§ –†–µ–∂–∏–º: –æ–±—ã—á–Ω–∞—è —Ä—É—Å—Å–∫–∞—è –ø–µ—á–∞—Ç—å")

    def paste_text_global(self):
        if not hasattr(self, 'current_text'):
            return
        try:
            was_russian = is_russian_layout()
            if was_russian:
                switch_to_english()
                time.sleep(0.3)

            self.text_inserter.insert(self.current_text)

            if was_russian:
                switch_to_russian()
                time.sleep(0.3)

            self.set_status("‚úÖ –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω!")
        except Exception as e:
            self.set_status(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: {str(e)}")

    def process_results(self):
        try:
            while True:
                text = self.result_queue.get_nowait()
                if text.strip():
                    processed_text = self.text_processor.process(text)
                    success = self.text_inserter.insert(processed_text)
                    self.root.after(0, self.update_text, processed_text)
        except queue.Empty:
            pass
        finally:
            if self.listening:
                self.root.after(50, self.process_results)

    def toggle_recording(self):
        if not self.listening:
            self.start_listening()
        else:
            self.stop_listening()

    def start_listening(self):
        self.listening = True
        self.start_btn.config(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", bg='#c0392b')
        self.record_indicator.config(text="üü¢ –ó–ê–ü–ò–°–¨ –ò–î–Å–¢... –ì–û–í–û–†–ò–¢–ï", fg='green')
        self.set_status("üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞...")

        threading.Thread(target=self.speech_recognizer.listen, args=(self.result_queue, lambda: self.listening), daemon=True).start()
        self.root.after(50, self.process_results)

    def stop_listening(self):
        self.listening = False
        self.start_btn.config(text="üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", bg='#e74c3c')
        self.record_indicator.config(text="üî¥ –ù–ï –ó–ê–ü–ò–°–´–í–ê–ï–¢", fg='red')
        self.set_status("‚è∏Ô∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def update_text(self, text):
        self.current_text += text
        if text:
            self.current_text += " "
        self.text_area.delete(1.0, tk.END)
        self.text_area.insert(tk.END, self.current_text)
        self.copy_to_clipboard()
        self.update_stats()
        self.text_area.see(tk.END)

    def update_stats(self):
        text = self.current_text
        word_count = len(text.split()) if text.strip() else 0
        char_count = len(text)
        self.stats_label.config(text=f"–°–ª–æ–≤: {word_count} | –°–∏–º–≤–æ–ª–æ–≤: {char_count}")

    def clear_text(self):
        self.current_text = ""
        self.text_area.delete(1.0, tk.END)
        pyperclip.copy("")
        self.update_stats()
        self.set_status("üßπ –¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")

    def copy_to_clipboard(self):
        pyperclip.copy(self.current_text)

    def on_closing(self):
        self.listening = False
        try:
            keyboard.remove_hotkey('f12')
        except: pass
        if hasattr(self, 'speech_recognizer'):
            self.speech_recognizer.stop()
        self.root.destroy()


# =============================
# üöÄ –ó–ê–ü–£–°–ö
# =============================
if __name__ == "__main__":
    root = tk.Tk()
    try:
        app = SmartInstantVoiceNotepad(root)
        root.protocol("WM_DELETE_WINDOW", app.on_closing)
        root.mainloop()
    except Exception as e:
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{str(e)}")
        sys.exit(1)
